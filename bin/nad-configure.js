#!/usr/bin/env node
'use strict';

var log      = require('npmlog')
  , minimist = require('minimist')
  , xtend    = require('xtend')
  , path     = require('path')
  , fs       = require('fs')
  ;

function usage() {
  var usageFile = path.join(__dirname, 'nad-configure-usage.txt');
  fs.createReadStream(usageFile).pipe(process.stdout);
  return;
}

var argv = minimist(process.argv.slice(2)
  , { boolean: [ 'h', 'help', 'make' ]
    , string: [ 'cc', 'cxx', 'link', 'nodedir', 'target' ]
  });

if (argv.h || argv.help) return usage();

var opts = xtend({
    cc       : 'clang'
  , cxx      : 'clang++'
  , link     : 'clang++'
  , target   : process.versions.node
}, argv)

// Ensure version doesn't include 'v', i.e. turn 'v0.10.31' into '0.10.31' 
if (opts.target[0] === 'v') opts.target = opts.target.slice(1);

if (!opts.nodename) {
  // we could be a bit smarter about resolving node name if nodedir is given
  opts.nodename = argv.nodedir ? 'io.js' : path.basename(process.execPath);  
}
// io.js executable is iojs, but all else (github repo, etc.) is io.js
if (opts.nodename === 'iojs') opts.nodename = 'io.js';

opts.nodedir = argv.nodedir 
  ? path.relative(process.cwd(), argv.nodedir)
  : path.relative(process.cwd(), opts.nodename + '-' + opts.target)

var config = 
  '# Generated by "nad configure", you may edit this or just rerun "nad configure"\n\n' +
  [ 'cc', 'cxx', 'link', 'target', 'nodedir', 'nodename' ] 
    .map(function (k) {
      return k.toUpperCase() + '?=' + opts[k]
    })
  .concat(
    [ 'make' ]
    .map(function (k) {
      var name = k === 'make' ? 'USE_MAKE' : k.toUpperCase();
      return name + '?=' + (opts[k] ? 1 : 0);
    })
  )
  .join('\n')

var nadconfig_mk = path.join(process.cwd(), '.nadconfig.mk');
fs.writeFileSync(nadconfig_mk, config);

if (!argv.make) { 
  log.warn('nad', 'Using ninja to build, make sure it is installed "brew install ninja"');
  log.warn('nad', 'In order to use make to build instead please supply the --make flag go "nad configure"');
}

log.info('nad', 'Current config:')
fs.createReadStream(nadconfig_mk).pipe(process.stdout)
